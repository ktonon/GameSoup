[
    {
        "pk": 5, 
        "model": "library.method", 
        "fields": {
            "parameters": [
                32, 
                33
            ], 
            "signature": "Boolean areAdjacent(Item a, Item b)", 
            "name": "areAdjacent", 
            "returned": 17, 
            "description": "Are a and b adjacent?"
        }
    }, 
    {
        "pk": 1, 
        "model": "library.method", 
        "fields": {
            "parameters": [], 
            "signature": "Item call()", 
            "name": "call", 
            "returned": 15, 
            "description": "Compute some value."
        }
    }, 
    {
        "pk": 6, 
        "model": "library.method", 
        "fields": {
            "parameters": [], 
            "signature": "Boolean call()", 
            "name": "call", 
            "returned": 17, 
            "description": "What is the truth value of this predicate object?"
        }
    }, 
    {
        "pk": 4, 
        "model": "library.method", 
        "fields": {
            "parameters": [], 
            "signature": "doAction()", 
            "name": "doAction", 
            "returned": 16, 
            "description": "Perform the default action of this object."
        }
    }, 
    {
        "pk": 13, 
        "model": "library.method", 
        "fields": {
            "parameters": [], 
            "signature": "focus()", 
            "name": "focus", 
            "returned": 16, 
            "description": "Give focus to the object. Input messages from the keyboard and mouse will go directly to this object after focus is called."
        }
    }, 
    {
        "pk": 11, 
        "model": "library.method", 
        "fields": {
            "parameters": [], 
            "signature": "Over getRandomObject()", 
            "name": "getRandomObject", 
            "returned": 26, 
            "description": "Return a random object from a distribution"
        }
    }, 
    {
        "pk": 12, 
        "model": "library.method", 
        "fields": {
            "parameters": [], 
            "signature": "Item instantiate()", 
            "name": "instantiate", 
            "returned": 15, 
            "description": "Create an instance of a given type."
        }
    }, 
    {
        "pk": 3, 
        "model": "library.method", 
        "fields": {
            "parameters": [], 
            "signature": "Item nextInIteration()", 
            "name": "nextInIteration", 
            "returned": 15, 
            "description": "Get the next object in the sequence. When the sequence is over, this should return null."
        }
    }, 
    {
        "pk": 10, 
        "model": "library.method", 
        "fields": {
            "parameters": [], 
            "signature": "Item pop()", 
            "name": "pop", 
            "returned": 15, 
            "description": "Remove the object at the top of the stack and return it."
        }
    }, 
    {
        "pk": 9, 
        "model": "library.method", 
        "fields": {
            "parameters": [
                20
            ], 
            "signature": "push(Item item)", 
            "name": "push", 
            "returned": 16, 
            "description": "Push an object on top of the stack."
        }
    }, 
    {
        "pk": 7, 
        "model": "library.method", 
        "fields": {
            "parameters": [], 
            "signature": "Item read()", 
            "name": "read", 
            "returned": 15, 
            "description": "Read this content of this object."
        }
    }, 
    {
        "pk": 14, 
        "model": "library.method", 
        "fields": {
            "parameters": [], 
            "signature": "String reason()", 
            "name": "reason", 
            "returned": 39, 
            "description": "What was the reason for the last answer this predicate gave?"
        }
    }, 
    {
        "pk": 2, 
        "model": "library.method", 
        "fields": {
            "parameters": [], 
            "signature": "resetIteration()", 
            "name": "resetIteration", 
            "returned": 16, 
            "description": "Reset the iteraction. The next call to nextInIteration should be the first in the sequence."
        }
    }, 
    {
        "pk": 8, 
        "model": "library.method", 
        "fields": {
            "parameters": [
                20
            ], 
            "signature": "write(Item item)", 
            "name": "write", 
            "returned": 16, 
            "description": "Write a value to the content of this object."
        }
    }, 
    {
        "pk": 16, 
        "model": "library.interface", 
        "fields": {
            "methods": [
                4
            ], 
            "is_built_in": false, 
            "name": "Action", 
            "description": "Represents an procedure that can be called at specific points during game play. Actions can be hooked up to a target object, given a specific event name. When the target fires the event, the action is called."
        }
    }, 
    {
        "pk": 1, 
        "model": "library.interface", 
        "fields": {
            "methods": [], 
            "is_built_in": false, 
            "name": "Any", 
            "description": "An empty interface. If you have an object of type any, then you don't know anything about it."
        }
    }, 
    {
        "pk": 7, 
        "model": "library.interface", 
        "fields": {
            "methods": [
                5
            ], 
            "is_built_in": false, 
            "name": "Board", 
            "description": "A collection of cells. For any two cells, you can ask the question \"Are these two cells adjacent?\" Note that if A and B are adjacent the B and A are adjacent."
        }
    }, 
    {
        "pk": 5, 
        "model": "library.interface", 
        "fields": {
            "methods": [], 
            "is_built_in": true, 
            "name": "Boolean", 
            "description": "A true or false value"
        }
    }, 
    {
        "pk": 21, 
        "model": "library.interface", 
        "fields": {
            "methods": [
                11
            ], 
            "is_built_in": false, 
            "name": "Distribution", 
            "description": "A space from which random objects can be sampled."
        }
    }, 
    {
        "pk": 22, 
        "model": "library.interface", 
        "fields": {
            "methods": [
                12
            ], 
            "is_built_in": false, 
            "name": "Factory", 
            "description": "Used to generate instances of some type."
        }
    }, 
    {
        "pk": 13, 
        "model": "library.interface", 
        "fields": {
            "methods": [], 
            "is_built_in": true, 
            "name": "Float", 
            "description": "A floating point decimal number."
        }
    }, 
    {
        "pk": 23, 
        "model": "library.interface", 
        "fields": {
            "methods": [
                13
            ], 
            "is_built_in": false, 
            "name": "Focusable", 
            "description": "Represents an object which can be used for input. That is, it can be given focus to receive input from the keyboard."
        }
    }, 
    {
        "pk": 10, 
        "model": "library.interface", 
        "fields": {
            "methods": [
                1
            ], 
            "is_built_in": false, 
            "name": "Function", 
            "description": "Represents a bound executable piece of code that returns a value."
        }
    }, 
    {
        "pk": 9, 
        "model": "library.interface", 
        "fields": {
            "methods": [], 
            "is_built_in": true, 
            "name": "Integer", 
            "description": "A whole number either negative, zero, or positive."
        }
    }, 
    {
        "pk": 15, 
        "model": "library.interface", 
        "fields": {
            "methods": [
                3, 
                2
            ], 
            "is_built_in": false, 
            "name": "Iterable", 
            "description": "For collections of objects, allows each object in the collection to be visited one at a time."
        }
    }, 
    {
        "pk": 2, 
        "model": "library.interface", 
        "fields": {
            "methods": [], 
            "is_built_in": true, 
            "name": "Nothing", 
            "description": "Represents a value that doesn't contain anything."
        }
    }, 
    {
        "pk": 17, 
        "model": "library.interface", 
        "fields": {
            "methods": [
                6, 
                14
            ], 
            "is_built_in": false, 
            "name": "Predicate", 
            "description": "A object which can be asked a \"yes\" or \"no\" question."
        }
    }, 
    {
        "pk": 20, 
        "model": "library.interface", 
        "fields": {
            "methods": [
                7, 
                8
            ], 
            "is_built_in": false, 
            "name": "ReadWrite", 
            "description": "Both readable and writeable."
        }
    }, 
    {
        "pk": 11, 
        "model": "library.interface", 
        "fields": {
            "methods": [
                7
            ], 
            "is_built_in": false, 
            "name": "Readable", 
            "description": "Can be converted to a string by reading it."
        }
    }, 
    {
        "pk": 3, 
        "model": "library.interface", 
        "fields": {
            "methods": [
                10, 
                9
            ], 
            "is_built_in": false, 
            "name": "Stack", 
            "description": "Like a stack of plates. The last plate you pushed onto the stack is the first plate to be popped off."
        }
    }, 
    {
        "pk": 8, 
        "model": "library.interface", 
        "fields": {
            "methods": [], 
            "is_built_in": true, 
            "name": "String", 
            "description": "A sequence of characters."
        }
    }, 
    {
        "pk": 12, 
        "model": "library.interface", 
        "fields": {
            "methods": [
                8
            ], 
            "is_built_in": false, 
            "name": "Writable", 
            "description": "Can be updated by writing a string."
        }
    }, 
    {
        "pk": 18, 
        "model": "library.type", 
        "fields": {
            "implements": [
                16, 
                1
            ], 
            "code": "/*\r\n * Type: ActionPair\r\n * Do action a, then do action b.\r\n */\r\ngamesoup.library.types.ActionPair = Class.create(gamesoup.library.types.BaseType);\r\n\r\n/*****************************************************************************/\r\n/*                                 Parameters                                */\r\n/*****************************************************************************/\r\n//                                 REFERENCES                                \r\n// this._a                                                               Action\r\n// this._b                                                               Action\r\n\r\n\r\n/*****************************************************************************/\r\n/*                             Interface Methods                             */\r\n/*****************************************************************************/\r\ngamesoup.library.types.ActionPair.addMethods({\r\n    \r\n    /*---------------------------------------->                          Action\r\n     * Nothing doAction()\r\n     * \r\n     * Perform the default action of this object.\r\n     */                                                               /* vVv */\r\n    doAction: function() {\r\n        this._a.doAction();\r\n        this._b.doAction();\r\n    }                                                                 /* ^A^ */\r\n\r\n});\r\n\r\n/*****************************************************************************/\r\n/*                                Engine Hooks                               */\r\n/*           These methods are called by the gamesoup match engine.          */\r\n/*                         Do not call them yourself!                        */\r\n/*                    They are called in the order shown.                    */\r\n/*****************************************************************************/\r\ngamesoup.library.types.ActionPair.addMethods({ \r\n    \r\n    /*\r\n     * Perform custom initialization.\r\n     */                                                               /* vVv */\r\n    register: function() {\r\n        \r\n    }                                                                 /* ^A^ */\r\n    \r\n});\r\n\r\n/*****************************************************************************/\r\n/*                           Implementation Methods                          */\r\n/*                     Do not use outside of this module!                    */\r\n/*****************************************************************************/\r\ngamesoup.library.types.ActionPair.addMethods({\r\n    // Helper methods go here...\r\n});", 
            "name": "ActionPair", 
            "parameters": [
                36, 
                37
            ], 
            "visible": false, 
            "signature": "Action a\r\nAction b", 
            "has_state": false, 
            "description": "Do action a, then do action b."
        }
    }, 
    {
        "pk": 5, 
        "model": "library.type", 
        "fields": {
            "implements": [
                1
            ], 
            "code": "/*\n * Type: Button\n * A simple push button. Connect actions to its \"click\" event to make it useful.\n */\ngamesoup.library.types.Button = Class.create(gamesoup.library.types.BaseType);\n\n/*****************************************************************************/\n/*                                 Parameters                                */\n/*****************************************************************************/\n//                                 BUILT-INS                                 \n// this._label                                      -- String\n//                                 REFERENCES                                \n// this._action --                                     Action\n\n\n/*****************************************************************************/\n/*                                Engine Hooks                               */\n/*           These methods are called by the gamesoup match engine.          */\n/*                         Do not call them yourself!                        */\n/*                    They are called in the order shown.                    */\n/*****************************************************************************/\ngamesoup.library.types.Button.addMethods({ \n    \n    /*\n     * Extend the DOM and apply styling.\n     */                                                               /* vVv */\n    render: function() {\n        t = new Template('<input type=\"button\" value=\"#{label}\" style=\"width: 100%; height: 100%; font-size: #{size}px\" />');\r\n        var s = (this._width / this._label.length * 1.5).round();\r\n        s = s > this._height / 2 ? (this._height / 2).round() : s;\r\n        this._node.insert({bottom: t.evaluate({label: this._label, size: s})});\r\n        this._buttonNode = this._node.down('input[type=button]');\n    },                                                                /* ^A^ */\n    \n    /*\n     * Perform custom initialization.\n     */                                                               /* vVv */\n    register: function() {\n        this._buttonNode.observe('click', this._action.doAction.bind(this._action));\n    }                                                                 /* ^A^ */\n    \n});\n\n/*****************************************************************************/\n/*                           Implementation Methods                          */\n/*                     Do not use outside of this module!                    */\n/*****************************************************************************/\ngamesoup.library.types.Button.addMethods({\n    // Helper methods go here...\n});", 
            "name": "Button", 
            "parameters": [
                10, 
                23
            ], 
            "visible": true, 
            "signature": "String label\r\nAction action", 
            "has_state": false, 
            "description": "A simple push button. Connect actions to its \"click\" event to make it useful."
        }
    }, 
    {
        "pk": 14, 
        "model": "library.type", 
        "fields": {
            "implements": [
                1, 
                20, 
                11, 
                12
            ], 
            "code": "/*\n * Type: Cell\n * A simple type used to contain another\n */\ngamesoup.library.types.Cell = Class.create(gamesoup.library.types.BaseType);\n\n/*****************************************************************************/\n/*                             Interface Methods                             */\n/*****************************************************************************/\ngamesoup.library.types.Cell.addMethods({\n    \n    /*\n     * Item read()                                  -- used in ReadWrite, Readable\n     * Read this content of this object.\n     */                                                               /* vVv */\n    read: function() {\n        return this._item;\n    },                                                                /* ^A^ */\n\n    /*\n     * write(Item item)                             -- used in ReadWrite, Writable\n     * Write a value to the content of this object.\n     */                                                               /* vVv */\n    write: function(item) {\n        this._item = item;\r\n        this._node.innerHTML = item;\n    }                                                                 /* ^A^ */\n\n});\n\n/*****************************************************************************/\n/*                                Engine Hooks                               */\n/*           These methods are called by the gamesoup match engine.          */\n/*                         Do not call them yourself!                        */\n/*                    They are called in the order shown.                    */\n/*****************************************************************************/\ngamesoup.library.types.Cell.addMethods({ \n    \n    /*\n     * Perform custom initialization.\n     */                                                               /* vVv */\n    register: function() {\n        this._item = null;\n    }                                                                 /* ^A^ */\n    \n});\n\n/*****************************************************************************/\n/*                           Implementation Methods                          */\n/*                     Do not use outside of this module!                    */\n/*****************************************************************************/\ngamesoup.library.types.Cell.addMethods({\n    // Helper methods go here...\n});", 
            "name": "Cell", 
            "parameters": [], 
            "visible": false, 
            "signature": "", 
            "has_state": false, 
            "description": "A simple type used to contain another"
        }
    }, 
    {
        "pk": 15, 
        "model": "library.type", 
        "fields": {
            "implements": [
                1, 
                22
            ], 
            "code": "/*\n * Type: CellFactory\n * A factory for creating cells.\n */\ngamesoup.library.types.CellFactory = Class.create(gamesoup.library.types.BaseType);\n\n/*****************************************************************************/\n/*                             Interface Methods                             */\n/*****************************************************************************/\ngamesoup.library.types.CellFactory.addMethods({\n    \n    /*\n     * Item instantiate()                           -- used in Factory\n     * Create an instance of a given type.\n     */                                                               /* vVv */\n    instantiate: function() {\n        var cell = new gamesoup.library.types.Cell();\r\n        cell.createDOM();\r\n        cell.register();\r\n        return cell;\n    }                                                                 /* ^A^ */\n\n});\n\n/*****************************************************************************/\n/*                                Engine Hooks                               */\n/*           These methods are called by the gamesoup match engine.          */\n/*                         Do not call them yourself!                        */\n/*                    They are called in the order shown.                    */\n/*****************************************************************************/\ngamesoup.library.types.CellFactory.addMethods({ \n    \n    /*\n     * Perform custom initialization.\n     */                                                               /* vVv */\n    register: function() {\n        \n    }                                                                 /* ^A^ */\n    \n});\n\n/*****************************************************************************/\n/*                           Implementation Methods                          */\n/*                     Do not use outside of this module!                    */\n/*****************************************************************************/\ngamesoup.library.types.CellFactory.addMethods({\n    // Helper methods go here...\n});", 
            "name": "CellFactory", 
            "parameters": [], 
            "visible": false, 
            "signature": "", 
            "has_state": false, 
            "description": "A factory for creating cells."
        }
    }, 
    {
        "pk": 16, 
        "model": "library.type", 
        "fields": {
            "implements": [
                1
            ], 
            "code": "/*\r\n * Type: EnterKeyPressed\r\n * Do something when the enter key is pressed and when a given object has focus.\r\n */\r\ngamesoup.library.types.EnterKeyPressed = Class.create(gamesoup.library.types.BaseType);\r\n\r\n/*****************************************************************************/\r\n/*                                 Parameters                                */\r\n/*****************************************************************************/\r\n//                                 REFERENCES                                \r\n// this._action                                                          Action\r\n// this._focus                                                              Any\r\n\r\n\r\n/*****************************************************************************/\r\n/*                                Engine Hooks                               */\r\n/*           These methods are called by the gamesoup match engine.          */\r\n/*                         Do not call them yourself!                        */\r\n/*                    They are called in the order shown.                    */\r\n/*****************************************************************************/\r\ngamesoup.library.types.EnterKeyPressed.addMethods({ \r\n    \r\n    /*\r\n     * Perform custom initialization.\r\n     */                                                               /* vVv */\r\n    register: function() {\r\n        this._focus.observe('keydown', function(event) {\r\n            if (event.keyCode == Event.KEY_RETURN) {\r\n                this._action.doAction();\r\n            }\r\n        }.bind(this));\r\n    }                                                                 /* ^A^ */\r\n    \r\n});\r\n\r\n/*****************************************************************************/\r\n/*                           Implementation Methods                          */\r\n/*                     Do not use outside of this module!                    */\r\n/*****************************************************************************/\r\ngamesoup.library.types.EnterKeyPressed.addMethods({\r\n    // Helper methods go here...\r\n});", 
            "name": "EnterKeyPressed", 
            "parameters": [
                10, 
                34
            ], 
            "visible": false, 
            "signature": "Any focus\r\nAction action", 
            "has_state": false, 
            "description": "Do something when the enter key is pressed and when a given object has focus."
        }
    }, 
    {
        "pk": 11, 
        "model": "library.type", 
        "fields": {
            "implements": [
                1
            ], 
            "code": "/*\r\n * Type: GameStarted\r\n * Connect an action to this object to have it execute at the start of the game.\r\n */\r\ngamesoup.library.types.GameStarted = Class.create(gamesoup.library.types.BaseType);\r\n\r\n/*****************************************************************************/\r\n/*                                 Parameters                                */\r\n/*****************************************************************************/\r\n//                                 REFERENCES                                \r\n// this._action                                                          Action\r\n\r\n\r\n/*****************************************************************************/\r\n/*                                Engine Hooks                               */\r\n/*           These methods are called by the gamesoup match engine.          */\r\n/*                         Do not call them yourself!                        */\r\n/*                    They are called in the order shown.                    */\r\n/*****************************************************************************/\r\ngamesoup.library.types.GameStarted.addMethods({ \r\n    \r\n    /*\r\n     * Perform custom initialization.\r\n     */                                                               /* vVv */\r\n    register: function() {\r\n        $('gamesoup-engine').observe('game:start', this._action.doAction.bind(this._action));\r\n    }                                                                 /* ^A^ */\r\n    \r\n});\r\n\r\n/*****************************************************************************/\r\n/*                           Implementation Methods                          */\r\n/*                     Do not use outside of this module!                    */\r\n/*****************************************************************************/\r\ngamesoup.library.types.GameStarted.addMethods({\r\n    // Helper methods go here...\r\n});", 
            "name": "GameStarted", 
            "parameters": [
                10
            ], 
            "visible": false, 
            "signature": "Action action", 
            "has_state": false, 
            "description": "Connect an action to this object to have it execute at the start of the game."
        }
    }, 
    {
        "pk": 17, 
        "model": "library.type", 
        "fields": {
            "implements": [
                16, 
                1
            ], 
            "code": "/*\r\n * Type: GiveFocus\r\n * Give focus to a target object. After receiving focus, that object will accept input from the keyboard and mouse.\r\n */\r\ngamesoup.library.types.GiveFocus = Class.create(gamesoup.library.types.BaseType);\r\n\r\n/*****************************************************************************/\r\n/*                                 Parameters                                */\r\n/*****************************************************************************/\r\n//                                 REFERENCES                                \r\n// this._target                                                       Focusable\r\n\r\n\r\n/*****************************************************************************/\r\n/*                             Interface Methods                             */\r\n/*****************************************************************************/\r\ngamesoup.library.types.GiveFocus.addMethods({\r\n    \r\n    /*---------------------------------------->                          Action\r\n     * Nothing doAction()\r\n     * \r\n     * Perform the default action of this object.\r\n     */                                                               /* vVv */\r\n    doAction: function() {\r\n        this._target.focus();\r\n    }                                                                 /* ^A^ */\r\n\r\n});\r\n\r\n/*****************************************************************************/\r\n/*                                Engine Hooks                               */\r\n/*           These methods are called by the gamesoup match engine.          */\r\n/*                         Do not call them yourself!                        */\r\n/*                    They are called in the order shown.                    */\r\n/*****************************************************************************/\r\ngamesoup.library.types.GiveFocus.addMethods({ \r\n    \r\n    /*\r\n     * Perform custom initialization.\r\n     */                                                               /* vVv */\r\n    register: function() {\r\n        \r\n    }                                                                 /* ^A^ */\r\n    \r\n});\r\n\r\n/*****************************************************************************/\r\n/*                           Implementation Methods                          */\r\n/*                     Do not use outside of this module!                    */\r\n/*****************************************************************************/\r\ngamesoup.library.types.GiveFocus.addMethods({\r\n    // Helper methods go here...\r\n});", 
            "name": "GiveFocus", 
            "parameters": [
                35
            ], 
            "visible": false, 
            "signature": "Focusable target", 
            "has_state": false, 
            "description": "Give focus to a target object. After receiving focus, that object will accept input from the keyboard and mouse."
        }
    }, 
    {
        "pk": 8, 
        "model": "library.type", 
        "fields": {
            "implements": [
                1, 
                7, 
                15
            ], 
            "code": "/*\n * Type: HexagonalGrid\n * A board in which each cell is shaped like a hexagon.\n */\ngamesoup.library.types.HexagonalGrid = Class.create(gamesoup.library.types.BaseType);\n\n/*****************************************************************************/\n/*                                 Parameters                                */\n/*****************************************************************************/\n//                                 BUILT-INS                                 \n// this._radius                                     -- Integer\n\n/*****************************************************************************/\n/*                             Interface Methods                             */\n/*****************************************************************************/\ngamesoup.library.types.HexagonalGrid.addMethods({\n    \n    /*\n     * Boolean areAdjacent(Cell a, Cell b)          -- used in Board\n     * Are cell a and cell b adjacent?\n     */                                                               /* vVv */\n    areAdjacent: function() {\n        \n    },                                                                /* ^A^ */\n\n    /*\n     * Item nextInIteration()                       -- used in Iterable\n     * Get the next object in the sequence. When the sequence is over, this should return null.\n     */                                                               /* vVv */\n    nextInIteration: function() {\n        \n    },                                                                /* ^A^ */\n\n    /*\n     * resetIteration()                             -- used in Iterable\n     * Reset the iteraction. The next call to nextInIteration should be the first in the sequence.\n     */                                                               /* vVv */\n    resetIteration: function() {\n        \n    }                                                                 /* ^A^ */\n\n});\n\n/*****************************************************************************/\n/*                                Engine Hooks                               */\n/*           These methods are called by the gamesoup match engine.          */\n/*                         Do not call them yourself!                        */\n/*                    They are called in the order shown.                    */\n/*****************************************************************************/\ngamesoup.library.types.HexagonalGrid.addMethods({ \n    \n    /*\n     * Extend the DOM and apply styling.\n     */                                                               /* vVv */\n    render: function() {\n        \n    },                                                                /* ^A^ */\n    \n    /*\n     *\n     */                                                               /* vVv */\n    stateSchema: function() {\n        \n    },                                                                /* ^A^ */\n    \n    /*\n     *\n     */                                                               /* vVv */\n    initialState: function() {\n        \n    },                                                                /* ^A^ */\n    \n    /*\n     * Perform custom initialization.\n     */                                                               /* vVv */\n    register: function() {\n        \n    }                                                                 /* ^A^ */\n    \n});\n\n/*****************************************************************************/\n/*                           Implementation Methods                          */\n/*                     Do not use outside of this module!                    */\n/*****************************************************************************/\ngamesoup.library.types.HexagonalGrid.addMethods({\n    // Helper methods go here...\n});", 
            "name": "HexagonalGrid", 
            "parameters": [
                6
            ], 
            "visible": true, 
            "signature": "Integer radius", 
            "has_state": true, 
            "description": "A board in which each cell is shaped like a hexagon."
        }
    }, 
    {
        "pk": 12, 
        "model": "library.type", 
        "fields": {
            "implements": [
                16, 
                1
            ], 
            "code": "/*\n * Type: InitializeCollection\n * For each writable cell in a collection, provide a newly instantiated object.\n */\ngamesoup.library.types.InitializeCollection = Class.create(gamesoup.library.types.BaseType);\n\n/*****************************************************************************/\n/*                                 Parameters                                */\n/*****************************************************************************/\n//                                 REFERENCES                                \n// this._collection --                         Iterable&lt;Item=Any&gt;\n// this._factory --                          Factory&lt;Item=Any&gt;\n\n\n/*****************************************************************************/\n/*                             Interface Methods                             */\n/*****************************************************************************/\ngamesoup.library.types.InitializeCollection.addMethods({\n    \n    /*\n     * doAction()                                   -- used in Action\n     * Perform the default action of this object.\n     */                                                               /* vVv */\n    doAction: function() {\n        this._collection.resetIteration();\r\n        var nextCell = this._collection.nextInIteration()\r\n        while (nextCell) {\r\n            var item = this._factory.instantiate();\r\n            nextCell.write(item);\r\n            nextCell = this._collection.nextInIteration();\r\n        }\n    }                                                                 /* ^A^ */\n\n});\n\n/*****************************************************************************/\n/*                                Engine Hooks                               */\n/*           These methods are called by the gamesoup match engine.          */\n/*                         Do not call them yourself!                        */\n/*                    They are called in the order shown.                    */\n/*****************************************************************************/\ngamesoup.library.types.InitializeCollection.addMethods({ \n    \n    /*\n     * Perform custom initialization.\n     */                                                               /* vVv */\n    register: function() {\n        \n    }                                                                 /* ^A^ */\n    \n});\n\n/*****************************************************************************/\n/*                           Implementation Methods                          */\n/*                     Do not use outside of this module!                    */\n/*****************************************************************************/\ngamesoup.library.types.InitializeCollection.addMethods({\n    // Helper methods go here...\n});", 
            "name": "InitializeCollection", 
            "parameters": [
                29, 
                28
            ], 
            "visible": false, 
            "signature": "Factory factory\r\nIterable collection\r\n", 
            "has_state": false, 
            "description": "For each writable cell in a collection, provide a newly instantiated object."
        }
    }, 
    {
        "pk": 2, 
        "model": "library.type", 
        "fields": {
            "implements": [
                1
            ], 
            "code": "/*\n * Type: Label\n * A simple way to place text on the screen. The value never changes throughout the game.\n */\ngamesoup.library.types.Label = Class.create(gamesoup.library.types.BaseType);\n\n/*****************************************************************************/\n/*                                 Parameters                                */\n/*****************************************************************************/\n//                                 BUILT-INS                                 \n// this._value                                      -- String\n\n/*****************************************************************************/\n/*                                Engine Hooks                               */\n/*           These methods are called by the gamesoup match engine.          */\n/*                         Do not call them yourself!                        */\n/*                    They are called in the order shown.                    */\n/*****************************************************************************/\ngamesoup.library.types.Label.addMethods({ \n    \n    /*\n     * Extend the DOM and apply styling.\n     */                                                               /* vVv */\n    render: function() {\n        t = new Template('<div class=\"label\" style=\"font-size: #{size}px\">#{value}</div>');\r\n        var s = (this._width / this._value.length * 1.5).round();\r\n        s = s > this._height / 2 ? (this._height / 2).round() : s;\r\n        this._node.insert({bottom: t.evaluate({value: this._value, size: s})});\n    },                                                                /* ^A^ */\n    \n    /*\n     * Perform custom initialization.\n     */                                                               /* vVv */\n    register: function() {\n        \n    }                                                                 /* ^A^ */\n    \n});\n\n/*****************************************************************************/\n/*                           Implementation Methods                          */\n/*                     Do not use outside of this module!                    */\n/*****************************************************************************/\ngamesoup.library.types.Label.addMethods({\n    // Helper methods go here...\n});", 
            "name": "Label", 
            "parameters": [
                3
            ], 
            "visible": true, 
            "signature": "String value", 
            "has_state": false, 
            "description": "A simple way to place text on the screen. The value never changes throughout the game."
        }
    }, 
    {
        "pk": 4, 
        "model": "library.type", 
        "fields": {
            "implements": [
                1, 
                15, 
                20, 
                11, 
                3, 
                12
            ], 
            "code": "/*\n * Type: List\n * A vertical sequence of items that can be updated during the game.\n */\ngamesoup.library.types.List = Class.create(gamesoup.library.types.BaseType);\n\n/*****************************************************************************/\n/*                             Interface Methods                             */\n/*****************************************************************************/\ngamesoup.library.types.List.addMethods({\n    \n    /*\n     * Item nextInIteration()                       -- used in Iterable\n     * Get the next object in the sequence. When the sequence is over, this should return null.\n     */                                                               /* vVv */\n    nextInIteration: function() {\n        var item = this._items[this._iteratorIndex];\r\n        this._iteratorIndex++;\r\n        return item;\n    },                                                                /* ^A^ */\n\n    /*\n     * Item pop()                                   -- used in Stack\n     * Remove the object at the top of the stack and return it.\n     */                                                               /* vVv */\n    pop: function() {\n        this._listNode.select('li').first().remove();\r\n        return this._items.pop();\n    },                                                                /* ^A^ */\n\n    /*\n     * push(Item item)                              -- used in Stack\n     * Push an object on top of the stack.\n     */                                                               /* vVv */\n    push: function(item) {\n        this._listNode.insert(this._listItemTemplate.evaluate({item: item}));\r\n        this._items.push(item);\n    },                                                                /* ^A^ */\n\n    /*\n     * Item read()                                  -- used in ReadWrite, Readable\n     * Read this content of this object.\n     */                                                               /* vVv */\n    read: function() {\n        return this._items.first();\n    },                                                                /* ^A^ */\n\n    /*\n     * resetIteration()                             -- used in Iterable\n     * Reset the iteraction. The next call to nextInIteration should be the first in the sequence.\n     */                                                               /* vVv */\n    resetIteration: function() {\n        this._iteratorIndex = 0;\n    },                                                                /* ^A^ */\n\n    /*\n     * write(Item item)                             -- used in ReadWrite, Writable\n     * Write a value to the content of this object.\n     */                                                               /* vVv */\n    write: function(item) {\n        this.push(item);\n    }                                                                 /* ^A^ */\n\n});\n\n/*****************************************************************************/\n/*                                Engine Hooks                               */\n/*           These methods are called by the gamesoup match engine.          */\n/*                         Do not call them yourself!                        */\n/*                    They are called in the order shown.                    */\n/*****************************************************************************/\ngamesoup.library.types.List.addMethods({ \n    \n    /*\n     * Extend the DOM and apply styling.\n     */                                                               /* vVv */\n    render: function() {\n        this._node.insert({bottom: '<ul class=\"box list inner-container\"></ul>'});\r\n        this._listNode = this._node.down('.list');\n    },                                                                /* ^A^ */\n    \n    /*\n     *\n     */                                                               /* vVv */\n    stateSchema: function() {\n        \n    },                                                                /* ^A^ */\n    \n    /*\n     *\n     */                                                               /* vVv */\n    initialState: function() {\n        \n    },                                                                /* ^A^ */\n    \n    /*\n     * Perform custom initialization.\n     */                                                               /* vVv */\n    register: function() {\n        this._listItemTemplate = new Template('<li>#{item}</li>');\r\n        this._items = $A();\r\n        this.resetIteration();\n    }                                                                 /* ^A^ */\n    \n});\n\n/*****************************************************************************/\n/*                           Implementation Methods                          */\n/*                     Do not use outside of this module!                    */\n/*****************************************************************************/\ngamesoup.library.types.List.addMethods({\n    // Helper methods go here...\n});", 
            "name": "List", 
            "parameters": [], 
            "visible": true, 
            "signature": "", 
            "has_state": true, 
            "description": "A vertical sequence of items that can be updated during the game."
        }
    }, 
    {
        "pk": 13, 
        "model": "library.type", 
        "fields": {
            "implements": [
                21, 
                22
            ], 
            "code": "/*\n * Type: RandomEnglishLetters\n * Distribution over the Latin alphabet. Generates letters in the frequency in which they occur in the English language.\n */\ngamesoup.library.types.RandomEnglishLetters = Class.create(gamesoup.library.types.BaseType);\n\n/*****************************************************************************/\n/*                             Interface Methods                             */\n/*****************************************************************************/\ngamesoup.library.types.RandomEnglishLetters.addMethods({\n    \n    /*\n     * Over getRandomObject()                       -- used in Distribution\n     * Return a random object from a distribution\n     */                                                               /* vVv */\n    getRandomObject: function() {\n        return this._letters[(Math.random() * this._letters.length).floor()];\n    },                                                                /* ^A^ */\n\n    /*\n     * Item instantiate()                           -- used in Factory\n     * Create an instance of a given type.\n     */                                                               /* vVv */\n    instantiate: function() {\n        return this.getRandomObject();\n    }                                                                 /* ^A^ */\n\n});\n\n/*****************************************************************************/\n/*                                Engine Hooks                               */\n/*           These methods are called by the gamesoup match engine.          */\n/*                         Do not call them yourself!                        */\n/*                    They are called in the order shown.                    */\n/*****************************************************************************/\ngamesoup.library.types.RandomEnglishLetters.addMethods({ \n    \n    /*\n     * Perform custom initialization.\n     */                                                               /* vVv */\n    register: function() {\n        this._letters = \"\";\r\n        var freqs = [82,15,28,43,127,22,20,61,70,2,8,40,24,67,75,19,1,60,63,91,28,10,24,2,20,1];\r\n        freqs.zip(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\".toArray()).each(function(item) {\r\n            var freq = item[0];\r\n            var letter = item[1];\r\n            this._letters += letter.times(freq);\r\n        }.bind(this));\n    }                                                                 /* ^A^ */\n    \n});\n\n/*****************************************************************************/\n/*                           Implementation Methods                          */\n/*                     Do not use outside of this module!                    */\n/*****************************************************************************/\ngamesoup.library.types.RandomEnglishLetters.addMethods({\n    // Helper methods go here...\n});", 
            "name": "RandomEnglishLetters", 
            "parameters": [], 
            "visible": false, 
            "signature": "", 
            "has_state": false, 
            "description": "Distribution over the Latin alphabet. Generates letters in the frequency in which they occur in the English language."
        }
    }, 
    {
        "pk": 10, 
        "model": "library.type", 
        "fields": {
            "implements": [
                16, 
                1
            ], 
            "code": "/*\n * Type: SayHello\n * A simple object that just opens an alert box with a message. This object is useful during game design as a simple test that an action is getting triggered.\n */\ngamesoup.library.types.SayHello = Class.create(gamesoup.library.types.BaseType);\n\n/*****************************************************************************/\n/*                                 Parameters                                */\n/*****************************************************************************/\n//                                 BUILT-INS                                 \n// this._message                                    -- String\n\n/*****************************************************************************/\n/*                             Interface Methods                             */\n/*****************************************************************************/\ngamesoup.library.types.SayHello.addMethods({\n    \n    /*\n     * doAction()                                   -- used in Action\n     * Perform the default action of this object.\n     */                                                               /* vVv */\n    doAction: function() {\n        alert(this._message);\n    }                                                                 /* ^A^ */\n\n});\n\n/*****************************************************************************/\n/*                                Engine Hooks                               */\n/*           These methods are called by the gamesoup match engine.          */\n/*                         Do not call them yourself!                        */\n/*                    They are called in the order shown.                    */\n/*****************************************************************************/\ngamesoup.library.types.SayHello.addMethods({ \n    \n    /*\n     * Perform custom initialization.\n     */                                                               /* vVv */\n    register: function() {\n        \n    }                                                                 /* ^A^ */\n    \n});\n\n/*****************************************************************************/\n/*                           Implementation Methods                          */\n/*                     Do not use outside of this module!                    */\n/*****************************************************************************/\ngamesoup.library.types.SayHello.addMethods({\n    // Helper methods go here...\n});", 
            "name": "SayHello", 
            "parameters": [
                24
            ], 
            "visible": false, 
            "signature": "String message", 
            "has_state": false, 
            "description": "A simple object that just opens an alert box with a message. This object is useful during game design as a simple test that an action is getting triggered."
        }
    }, 
    {
        "pk": 7, 
        "model": "library.type", 
        "fields": {
            "implements": [
                1, 
                7, 
                15
            ], 
            "code": "/*\r\n * Type: SquareGrid\r\n * A board arranged in rows and columns.\r\n */\r\ngamesoup.library.types.SquareGrid = Class.create(gamesoup.library.types.BaseType);\r\n\r\n/*****************************************************************************/\r\n/*                                 Parameters                                */\r\n/*****************************************************************************/\r\n//                                 BUILT-INS                                 \r\n// this._colCount                                   -- Integer\r\n// this._rowCount                                   -- Integer\r\n\r\n/*****************************************************************************/\r\n/*                             Interface Methods                             */\r\n/*****************************************************************************/\r\ngamesoup.library.types.SquareGrid.addMethods({\r\n    \r\n    /*\r\n     * Boolean areAdjacent(Cell a, Cell b)          -- used in Board\r\n     * Are cell a and cell b adjacent?\r\n     */                                                               /* vVv */\r\n    areAdjacent: function() {\r\n        \r\n    },                                                                /* ^A^ */\r\n\r\n    /*\r\n     * Item nextInIteration()                       -- used in Iterable\r\n     * Get the next object in the sequence. When the sequence is over, this should return null.\r\n     */                                                               /* vVv */\r\n    nextInIteration: function() {\r\n        var cell = this._cells[this._iteratorIndex];\r\n        this._iteratorIndex++;\r\n        return cell;\r\n    },                                                                /* ^A^ */\r\n\r\n    /*\r\n     * resetIteration()                             -- used in Iterable\r\n     * Reset the iteraction. The next call to nextInIteration should be the first in the sequence.\r\n     */                                                               /* vVv */\r\n    resetIteration: function() {\r\n        this._iteratorIndex = 0;\r\n    }                                                                 /* ^A^ */\r\n\r\n});\r\n\r\n/*****************************************************************************/\r\n/*                                Engine Hooks                               */\r\n/*           These methods are called by the gamesoup match engine.          */\r\n/*                         Do not call them yourself!                        */\r\n/*                    They are called in the order shown.                    */\r\n/*****************************************************************************/\r\ngamesoup.library.types.SquareGrid.addMethods({ \r\n    \r\n    /*\r\n     * Extend the DOM and apply styling.\r\n     */                                                               /* vVv */\r\n    render: function() {\r\n        this._node.insert({bottom: '<div class=\"inner-container\"></div>'});\r\n        var container = this._node.down('.inner-container');\r\n        var t = new Template('<div class=\"col-#{i} row-#{j} cell\" style=\"position: absolute; left: #{left}px; top: #{top}px; width: #{width}px; height: #{height}px;\"></div>')\r\n        var c = {\r\n            left: 0,\r\n            top: 0,\r\n            width: (this._width / this._colCount).round() - 2,\r\n            height: (this._height / this._rowCount).round() - 2\r\n        };\r\n        for (c.i=0; c.i<this._colCount; c.i++) {\r\n            c.top = 0;\r\n            for (c.j=0; c.j<this._rowCount; c.j++) {\r\n                container.insert({bottom: t.evaluate(c)});\r\n                c.top += c.height + 2;\r\n            }\r\n            c.left += c.width + 2;\r\n        }\r\n    },                                                                /* ^A^ */\r\n    \r\n    /*\r\n     *\r\n     */                                                               /* vVv */\r\n    stateSchema: function() {\r\n        \r\n    },                                                                /* ^A^ */\r\n    \r\n    /*\r\n     *\r\n     */                                                               /* vVv */\r\n    initialState: function() {\r\n        \r\n    },                                                                /* ^A^ */\r\n    \r\n    /*\r\n     * Perform custom initialization.\r\n     */                                                               /* vVv */\r\n    register: function() {\r\n        this._cells = $A();\r\n        this._factory = new gamesoup.library.types.CellFactory();\r\n        var t = new Template('.col-#{i}.row-#{j}');\r\n        var c = {};\r\n        for (c.i=0; c.i<this._colCount; c.i++) {\r\n            for (c.j=0; c.j<this._rowCount; c.j++) {\r\n                var cell = this._factory.instantiate();\r\n                var cellContainerNode = this._node.down(t.evaluate(c));\r\n                cellContainerNode.insert({bottom: cell._node});\r\n                this._cells.push(cell);\r\n            }\r\n        }\r\n        this.resetIteration();\r\n    }                                                                 /* ^A^ */\r\n    \r\n});\r\n\r\n/*****************************************************************************/\r\n/*                           Implementation Methods                          */\r\n/*                     Do not use outside of this module!                    */\r\n/*****************************************************************************/\r\ngamesoup.library.types.SquareGrid.addMethods({\r\n    // Helper methods go here...\r\n});", 
            "name": "SquareGrid", 
            "parameters": [
                8, 
                7
            ], 
            "visible": true, 
            "signature": "Integer rowCount\r\nInteger colCount", 
            "has_state": true, 
            "description": "A board arranged in rows and columns."
        }
    }, 
    {
        "pk": 6, 
        "model": "library.type", 
        "fields": {
            "implements": [
                16, 
                1
            ], 
            "code": "/*\r\n * Type: SubmitStringWithCheck\r\n * Action that reads a string from a source and if it is ok, sends it to a receiver. The source is cleared.\r\n */\r\ngamesoup.library.types.SubmitStringWithCheck = Class.create(gamesoup.library.types.BaseType);\r\n\r\n/*****************************************************************************/\r\n/*                                 Parameters                                */\r\n/*****************************************************************************/\r\n//                                 REFERENCES                                \r\n// this._destination                                                   Writable\r\n// this._source                                                       ReadWrite\r\n// this._validator                                                    Predicate\r\n\r\n\r\n/*****************************************************************************/\r\n/*                             Interface Methods                             */\r\n/*****************************************************************************/\r\ngamesoup.library.types.SubmitStringWithCheck.addMethods({\r\n    \r\n    /*---------------------------------------->                          Action\r\n     * Nothing doAction()\r\n     * \r\n     * Perform the default action of this object.\r\n     */                                                               /* vVv */\r\n    doAction: function() {\r\n        if (this._validator.call()) {\r\n            // Success\r\n            var item = this._source.read();\r\n            this._destination.write(item);\r\n        } else {\r\n            // Failure\r\n            gamesoup.matches.messageBoard.postLocally(this._validator.reason());\r\n        }\r\n        // Need support for multiple interfaces on parameters.\r\n        // this._source.clear();\r\n    }                                                                 /* ^A^ */\r\n\r\n});\r\n\r\n/*****************************************************************************/\r\n/*                                Engine Hooks                               */\r\n/*           These methods are called by the gamesoup match engine.          */\r\n/*                         Do not call them yourself!                        */\r\n/*                    They are called in the order shown.                    */\r\n/*****************************************************************************/\r\ngamesoup.library.types.SubmitStringWithCheck.addMethods({ \r\n    \r\n    /*\r\n     * Perform custom initialization.\r\n     */                                                               /* vVv */\r\n    register: function() {\r\n        \r\n    }                                                                 /* ^A^ */\r\n    \r\n});\r\n\r\n/*****************************************************************************/\r\n/*                           Implementation Methods                          */\r\n/*                     Do not use outside of this module!                    */\r\n/*****************************************************************************/\r\ngamesoup.library.types.SubmitStringWithCheck.addMethods({\r\n    // Helper methods go here...\r\n});", 
            "name": "SubmitStringWithCheck", 
            "parameters": [
                25, 
                12, 
                22
            ], 
            "visible": false, 
            "signature": "ReadWrite source\r\nWritable destination\r\nPredicate validator\r\n", 
            "has_state": false, 
            "description": "Action that reads a string from a source and if it is ok, sends it to a receiver. The source is cleared."
        }
    }, 
    {
        "pk": 3, 
        "model": "library.type", 
        "fields": {
            "implements": [
                1, 
                20, 
                11, 
                12
            ], 
            "code": "/*\n * Type: TextField\n * A text output field that can be updated during the game.\n */\ngamesoup.library.types.TextField = Class.create(gamesoup.library.types.BaseType);\n\n/*****************************************************************************/\n/*                             Interface Methods                             */\n/*****************************************************************************/\ngamesoup.library.types.TextField.addMethods({\n    \n    /*\n     * Item read()                                  -- used in ReadWrite, Readable\n     * Read this content of this object.\n     */                                                               /* vVv */\n    read: function() {\n        return this._value;\n    },                                                                /* ^A^ */\n\n    /*\n     * write(Item item)                             -- used in ReadWrite, Writable\n     * Write a value to the content of this object.\n     */                                                               /* vVv */\n    write: function(item) {\n        this._value = item;\r\n        this._node.innerHTML = item;\n    }                                                                 /* ^A^ */\n\n});\n\n/*****************************************************************************/\n/*                                Engine Hooks                               */\n/*           These methods are called by the gamesoup match engine.          */\n/*                         Do not call them yourself!                        */\n/*                    They are called in the order shown.                    */\n/*****************************************************************************/\ngamesoup.library.types.TextField.addMethods({ \n    \n    /*\n     * Extend the DOM and apply styling.\n     */                                                               /* vVv */\n    render: function() {\n        \n    },                                                                /* ^A^ */\n    \n    /*\n     *\n     */                                                               /* vVv */\n    stateSchema: function() {\n        \n    },                                                                /* ^A^ */\n    \n    /*\n     *\n     */                                                               /* vVv */\n    initialState: function() {\n        \n    },                                                                /* ^A^ */\n    \n    /*\n     * Perform custom initialization.\n     */                                                               /* vVv */\n    register: function() {\n        this._value = \"\";\n    }                                                                 /* ^A^ */\n    \n});\n\n/*****************************************************************************/\n/*                           Implementation Methods                          */\n/*                     Do not use outside of this module!                    */\n/*****************************************************************************/\ngamesoup.library.types.TextField.addMethods({\n    // Helper methods go here...\n});", 
            "name": "TextField", 
            "parameters": [], 
            "visible": true, 
            "signature": "", 
            "has_state": true, 
            "description": "A text output field that can be updated during the game."
        }
    }, 
    {
        "pk": 1, 
        "model": "library.type", 
        "fields": {
            "implements": [
                1, 
                23, 
                20, 
                11, 
                12
            ], 
            "code": "/*\r\n * Type: TextInput\r\n * For entering text.\r\n */\r\ngamesoup.library.types.TextInput = Class.create(gamesoup.library.types.BaseType);\r\n\r\n/*****************************************************************************/\r\n/*                             Interface Methods                             */\r\n/*****************************************************************************/\r\ngamesoup.library.types.TextInput.addMethods({\r\n    \r\n    /*---------------------------------------->                       Focusable\r\n     * Nothing focus()\r\n     * \r\n     * Give focus to the object. Input messages from the keyboard and mouse will go directly to this object after focus is called.\r\n     */                                                               /* vVv */\r\n    focus: function() {\r\n        this._inputNode.focus();\r\n    },                                                                /* ^A^ */\r\n\r\n    /*---------------------------------------->             ReadWrite, Readable\r\n     * Foo read()\r\n     * \r\n     * Read this content of this object.\r\n     */                                                               /* vVv */\r\n    read: function() {\r\n        return this._inputNode.getValue();\r\n    },                                                                /* ^A^ */\r\n\r\n    /*---------------------------------------->             ReadWrite, Writable\r\n     * Nothing write(Foo item)\r\n     * \r\n     * Write a value to the content of this object.\r\n     */                                                               /* vVv */\r\n    write: function(item) {\r\n        this._inputNode.setValue();\r\n    }                                                                 /* ^A^ */\r\n\r\n});\r\n\r\n/*****************************************************************************/\r\n/*                                Engine Hooks                               */\r\n/*           These methods are called by the gamesoup match engine.          */\r\n/*                         Do not call them yourself!                        */\r\n/*                    They are called in the order shown.                    */\r\n/*****************************************************************************/\r\ngamesoup.library.types.TextInput.addMethods({ \r\n    \r\n    /*\r\n     * Extend the DOM and apply styling.\r\n     */                                                               /* vVv */\r\n    render: function() {\r\n        t = new Template('<input type=\"text\" style=\"width: 100%; height: 100%; font-size: #{size}px\" />');\r\n        var s = (this._height / 2).round();\r\n        this._node.insert({bottom: t.evaluate({size: s})});\r\n        this._inputNode = this._node.down('input[type=text]');\r\n    },                                                                /* ^A^ */\r\n    \r\n    /*\r\n     * Perform custom initialization.\r\n     */                                                               /* vVv */\r\n    register: function() {\r\n        \r\n    }                                                                 /* ^A^ */\r\n    \r\n});\r\n\r\n/*****************************************************************************/\r\n/*                           Implementation Methods                          */\r\n/*                     Do not use outside of this module!                    */\r\n/*****************************************************************************/\r\ngamesoup.library.types.TextInput.addMethods({\r\n    // Helper methods go here...\r\n});", 
            "name": "TextInput", 
            "parameters": [], 
            "visible": true, 
            "signature": "", 
            "has_state": false, 
            "description": "For entering text."
        }
    }, 
    {
        "pk": 9, 
        "model": "library.type", 
        "fields": {
            "implements": [
                1, 
                17
            ], 
            "code": "/*\r\n * Type: WordOnBoardPath\r\n * Give a word, can a sequence of adjacent cells be found on a board where letters on those cells spell out the word?\r\n */\r\ngamesoup.library.types.WordOnBoardPath = Class.create(gamesoup.library.types.BaseType);\r\n\r\n/*****************************************************************************/\r\n/*                                 Parameters                                */\r\n/*****************************************************************************/\r\n//                                 REFERENCES                                \r\n// this._board                                Board<Cell=Readable<Item=String>>\r\n// this._word                                             Readable<Item=String>\r\n\r\n\r\n/*****************************************************************************/\r\n/*                             Interface Methods                             */\r\n/*****************************************************************************/\r\ngamesoup.library.types.WordOnBoardPath.addMethods({\r\n    \r\n    /*---------------------------------------->                       Predicate\r\n     * Boolean call()\r\n     * \r\n     * What is the truth value of this predicate object?\r\n     */                                                               /* vVv */\r\n    call: function() {\r\n        var c = {};\r\n        c.word = this._word.read();\r\n        if (c.word.length == 0) {\r\n            this._lastReason = \"Please type your word in.\";\r\n        } else {\r\n            this._lastReason = this._failReason.evaluate(c);            \r\n        }\r\n        return false;\r\n    },                                                                /* ^A^ */\r\n\r\n    /*---------------------------------------->                       Predicate\r\n     * String reason()\r\n     * \r\n     * What was the reason for the last answer this predicate gave?\r\n     */                                                               /* vVv */\r\n    reason: function() {\r\n        return this._lastReason;\r\n    }                                                                 /* ^A^ */\r\n\r\n});\r\n\r\n/*****************************************************************************/\r\n/*                                Engine Hooks                               */\r\n/*           These methods are called by the gamesoup match engine.          */\r\n/*                         Do not call them yourself!                        */\r\n/*                    They are called in the order shown.                    */\r\n/*****************************************************************************/\r\ngamesoup.library.types.WordOnBoardPath.addMethods({ \r\n    \r\n    /*\r\n     * Perform custom initialization.\r\n     */                                                               /* vVv */\r\n    register: function() {\r\n        this._failReason = new Template(\"The word #{word} was not on the board\");\r\n        this._successReason = new Template(\"The word #{word} was found!\");\r\n        this._lastReason = \"\";\r\n    }                                                                 /* ^A^ */\r\n    \r\n});\r\n\r\n/*****************************************************************************/\r\n/*                           Implementation Methods                          */\r\n/*                     Do not use outside of this module!                    */\r\n/*****************************************************************************/\r\ngamesoup.library.types.WordOnBoardPath.addMethods({\r\n    // Helper methods go here...\r\n});", 
            "name": "WordOnBoardPath", 
            "parameters": [
                41, 
                40
            ], 
            "visible": false, 
            "signature": "Readable<Item=String> word\r\nBoard<Cell=Readable<Item=String>> board\r\n", 
            "has_state": false, 
            "description": "Give a word, can a sequence of adjacent cells be found on a board where letters on those cells spell out the word?"
        }
    }, 
    {
        "pk": 32, 
        "model": "library.variable", 
        "fields": {
            "interface": null, 
            "interface_name": "Item", 
            "name": "a", 
            "interface_expression": "Item", 
            "signature": "Item a"
        }
    }, 
    {
        "pk": 36, 
        "model": "library.variable", 
        "fields": {
            "interface": 16, 
            "interface_name": "Action", 
            "name": "a", 
            "interface_expression": "Action", 
            "signature": "Action a"
        }
    }, 
    {
        "pk": 10, 
        "model": "library.variable", 
        "fields": {
            "interface": 16, 
            "interface_name": "Action", 
            "name": "action", 
            "interface_expression": "Action", 
            "signature": "Action action"
        }
    }, 
    {
        "pk": 33, 
        "model": "library.variable", 
        "fields": {
            "interface": null, 
            "interface_name": "Item", 
            "name": "b", 
            "interface_expression": "Item", 
            "signature": "Item b"
        }
    }, 
    {
        "pk": 37, 
        "model": "library.variable", 
        "fields": {
            "interface": 16, 
            "interface_name": "Action", 
            "name": "b", 
            "interface_expression": "Action", 
            "signature": "Action b"
        }
    }, 
    {
        "pk": 5, 
        "model": "library.variable", 
        "fields": {
            "interface": 7, 
            "interface_name": "Board", 
            "name": "board", 
            "interface_expression": "Board", 
            "signature": "Board board"
        }
    }, 
    {
        "pk": 41, 
        "model": "library.variable", 
        "fields": {
            "interface": 7, 
            "interface_name": "Board", 
            "name": "board", 
            "interface_expression": "Board<Cell=Readable<Item=String>>", 
            "signature": "Board<Cell=Readable<Item=String>> board"
        }
    }, 
    {
        "pk": 8, 
        "model": "library.variable", 
        "fields": {
            "interface": 9, 
            "interface_name": "Integer", 
            "name": "colCount", 
            "interface_expression": "Integer", 
            "signature": "Integer colCount"
        }
    }, 
    {
        "pk": 29, 
        "model": "library.variable", 
        "fields": {
            "interface": 15, 
            "interface_name": "Iterable", 
            "name": "collection", 
            "interface_expression": "Iterable", 
            "signature": "Iterable collection"
        }
    }, 
    {
        "pk": 21, 
        "model": "library.variable", 
        "fields": {
            "interface": null, 
            "interface_name": "Receiver", 
            "name": "destination", 
            "interface_expression": "Receiver", 
            "signature": "Receiver destination"
        }
    }, 
    {
        "pk": 25, 
        "model": "library.variable", 
        "fields": {
            "interface": 12, 
            "interface_name": "Writable", 
            "name": "destination", 
            "interface_expression": "Writable", 
            "signature": "Writable destination"
        }
    }, 
    {
        "pk": 11, 
        "model": "library.variable", 
        "fields": {
            "interface": 8, 
            "interface_name": "String", 
            "name": "event", 
            "interface_expression": "String", 
            "signature": "String event"
        }
    }, 
    {
        "pk": 27, 
        "model": "library.variable", 
        "fields": {
            "interface": 22, 
            "interface_name": "Factory", 
            "name": "factory", 
            "interface_expression": "Factory<Item=%(Item)s>", 
            "signature": "Factory<Item=Item> factory"
        }
    }, 
    {
        "pk": 28, 
        "model": "library.variable", 
        "fields": {
            "interface": 22, 
            "interface_name": "Factory", 
            "name": "factory", 
            "interface_expression": "Factory", 
            "signature": "Factory factory"
        }
    }, 
    {
        "pk": 34, 
        "model": "library.variable", 
        "fields": {
            "interface": 1, 
            "interface_name": "Any", 
            "name": "focus", 
            "interface_expression": "Any", 
            "signature": "Any focus"
        }
    }, 
    {
        "pk": 38, 
        "model": "library.variable", 
        "fields": {
            "interface": 8, 
            "interface_name": "String", 
            "name": "invalidMessage", 
            "interface_expression": "String", 
            "signature": "String invalidMessage"
        }
    }, 
    {
        "pk": 20, 
        "model": "library.variable", 
        "fields": {
            "interface": null, 
            "interface_name": "Item", 
            "name": "item", 
            "interface_expression": "Item", 
            "signature": "Item item"
        }
    }, 
    {
        "pk": 23, 
        "model": "library.variable", 
        "fields": {
            "interface": 8, 
            "interface_name": "String", 
            "name": "label", 
            "interface_expression": "String", 
            "signature": "String label"
        }
    }, 
    {
        "pk": 24, 
        "model": "library.variable", 
        "fields": {
            "interface": 8, 
            "interface_name": "String", 
            "name": "message", 
            "interface_expression": "String", 
            "signature": "String message"
        }
    }, 
    {
        "pk": 9, 
        "model": "library.variable", 
        "fields": {
            "interface": 1, 
            "interface_name": "Any", 
            "name": "observed", 
            "interface_expression": "Any", 
            "signature": "Any observed"
        }
    }, 
    {
        "pk": 30, 
        "model": "library.variable", 
        "fields": {
            "interface": 8, 
            "interface_name": "String", 
            "name": "param1", 
            "interface_expression": "String", 
            "signature": "String param1"
        }
    }, 
    {
        "pk": 31, 
        "model": "library.variable", 
        "fields": {
            "interface": 11, 
            "interface_name": "Readable", 
            "name": "param2", 
            "interface_expression": "Readable", 
            "signature": "Readable param2"
        }
    }, 
    {
        "pk": 6, 
        "model": "library.variable", 
        "fields": {
            "interface": 9, 
            "interface_name": "Integer", 
            "name": "radius", 
            "interface_expression": "Integer", 
            "signature": "Integer radius"
        }
    }, 
    {
        "pk": 15, 
        "model": "library.variable", 
        "fields": {
            "interface": null, 
            "interface_name": "Item", 
            "name": "returned", 
            "interface_expression": "Item", 
            "signature": "Item returned"
        }
    }, 
    {
        "pk": 16, 
        "model": "library.variable", 
        "fields": {
            "interface": 2, 
            "interface_name": "Nothing", 
            "name": "returned", 
            "interface_expression": "Nothing", 
            "signature": "Nothing returned"
        }
    }, 
    {
        "pk": 17, 
        "model": "library.variable", 
        "fields": {
            "interface": 5, 
            "interface_name": "Boolean", 
            "name": "returned", 
            "interface_expression": "Boolean", 
            "signature": "Boolean returned"
        }
    }, 
    {
        "pk": 26, 
        "model": "library.variable", 
        "fields": {
            "interface": null, 
            "interface_name": "Over", 
            "name": "returned", 
            "interface_expression": "Over", 
            "signature": "Over returned"
        }
    }, 
    {
        "pk": 39, 
        "model": "library.variable", 
        "fields": {
            "interface": 8, 
            "interface_name": "String", 
            "name": "returned", 
            "interface_expression": "String", 
            "signature": "String returned"
        }
    }, 
    {
        "pk": 7, 
        "model": "library.variable", 
        "fields": {
            "interface": 9, 
            "interface_name": "Integer", 
            "name": "rowCount", 
            "interface_expression": "Integer", 
            "signature": "Integer rowCount"
        }
    }, 
    {
        "pk": 2, 
        "model": "library.variable", 
        "fields": {
            "interface": 13, 
            "interface_name": "Float", 
            "name": "scale", 
            "interface_expression": "Float", 
            "signature": "Float scale"
        }
    }, 
    {
        "pk": 12, 
        "model": "library.variable", 
        "fields": {
            "interface": 20, 
            "interface_name": "ReadWrite", 
            "name": "source", 
            "interface_expression": "ReadWrite", 
            "signature": "ReadWrite source"
        }
    }, 
    {
        "pk": 35, 
        "model": "library.variable", 
        "fields": {
            "interface": 23, 
            "interface_name": "Focusable", 
            "name": "target", 
            "interface_expression": "Focusable", 
            "signature": "Focusable target"
        }
    }, 
    {
        "pk": 22, 
        "model": "library.variable", 
        "fields": {
            "interface": 17, 
            "interface_name": "Predicate", 
            "name": "validator", 
            "interface_expression": "Predicate", 
            "signature": "Predicate validator"
        }
    }, 
    {
        "pk": 3, 
        "model": "library.variable", 
        "fields": {
            "interface": 8, 
            "interface_name": "String", 
            "name": "value", 
            "interface_expression": "String", 
            "signature": "String value"
        }
    }, 
    {
        "pk": 1, 
        "model": "library.variable", 
        "fields": {
            "interface": 9, 
            "interface_name": "Integer", 
            "name": "width", 
            "interface_expression": "Integer", 
            "signature": "Integer width"
        }
    }, 
    {
        "pk": 4, 
        "model": "library.variable", 
        "fields": {
            "interface": 11, 
            "interface_name": "Readable", 
            "name": "word", 
            "interface_expression": "Readable", 
            "signature": "Readable word"
        }
    }, 
    {
        "pk": 40, 
        "model": "library.variable", 
        "fields": {
            "interface": 11, 
            "interface_name": "Readable", 
            "name": "word", 
            "interface_expression": "Readable<Item=String>", 
            "signature": "Readable<Item=String> word"
        }
    }, 
    {
        "pk": 1, 
        "model": "library.methodtemplateparameter", 
        "fields": {
            "of_method": 1, 
            "name": "Item", 
            "weakest": "Any"
        }
    }, 
    {
        "pk": 2, 
        "model": "library.methodtemplateparameter", 
        "fields": {
            "of_method": 3, 
            "name": "Item", 
            "weakest": "Any"
        }
    }, 
    {
        "pk": 3, 
        "model": "library.methodtemplateparameter", 
        "fields": {
            "of_method": 5, 
            "name": "Item", 
            "weakest": "Any"
        }
    }, 
    {
        "pk": 4, 
        "model": "library.methodtemplateparameter", 
        "fields": {
            "of_method": 7, 
            "name": "Item", 
            "weakest": "Any"
        }
    }, 
    {
        "pk": 5, 
        "model": "library.methodtemplateparameter", 
        "fields": {
            "of_method": 8, 
            "name": "Item", 
            "weakest": "Any"
        }
    }, 
    {
        "pk": 6, 
        "model": "library.methodtemplateparameter", 
        "fields": {
            "of_method": 9, 
            "name": "Item", 
            "weakest": "Any"
        }
    }, 
    {
        "pk": 7, 
        "model": "library.methodtemplateparameter", 
        "fields": {
            "of_method": 10, 
            "name": "Item", 
            "weakest": "Any"
        }
    }, 
    {
        "pk": 9, 
        "model": "library.methodtemplateparameter", 
        "fields": {
            "of_method": 12, 
            "name": "Item", 
            "weakest": "Any"
        }
    }, 
    {
        "pk": 8, 
        "model": "library.methodtemplateparameter", 
        "fields": {
            "of_method": 11, 
            "name": "Over", 
            "weakest": "Any"
        }
    }, 
    {
        "pk": 1, 
        "model": "library.interfacetemplateparameter", 
        "fields": {
            "of_interface": 10, 
            "name": "Item", 
            "weakest": "Any"
        }
    }, 
    {
        "pk": 2, 
        "model": "library.interfacetemplateparameter", 
        "fields": {
            "of_interface": 15, 
            "name": "Item", 
            "weakest": "Any"
        }
    }, 
    {
        "pk": 3, 
        "model": "library.interfacetemplateparameter", 
        "fields": {
            "of_interface": 20, 
            "name": "Item", 
            "weakest": "Any"
        }
    }, 
    {
        "pk": 4, 
        "model": "library.interfacetemplateparameter", 
        "fields": {
            "of_interface": 11, 
            "name": "Item", 
            "weakest": "Any"
        }
    }, 
    {
        "pk": 5, 
        "model": "library.interfacetemplateparameter", 
        "fields": {
            "of_interface": 3, 
            "name": "Item", 
            "weakest": "Any"
        }
    }, 
    {
        "pk": 6, 
        "model": "library.interfacetemplateparameter", 
        "fields": {
            "of_interface": 12, 
            "name": "Item", 
            "weakest": "Any"
        }
    }, 
    {
        "pk": 7, 
        "model": "library.interfacetemplateparameter", 
        "fields": {
            "of_interface": 7, 
            "name": "Item", 
            "weakest": "ReadWrite<Item=Any>"
        }
    }, 
    {
        "pk": 9, 
        "model": "library.interfacetemplateparameter", 
        "fields": {
            "of_interface": 22, 
            "name": "Item", 
            "weakest": "Any"
        }
    }, 
    {
        "pk": 8, 
        "model": "library.interfacetemplateparameter", 
        "fields": {
            "of_interface": 21, 
            "name": "Over", 
            "weakest": "Any"
        }
    }, 
    {
        "pk": 3, 
        "model": "library.typetemplateparameter", 
        "fields": {
            "of_type": 8, 
            "name": "Cell", 
            "weakest": "Any"
        }
    }, 
    {
        "pk": 4, 
        "model": "library.typetemplateparameter", 
        "fields": {
            "of_type": 7, 
            "name": "Cell", 
            "weakest": "ReadWrite<Item=Any>"
        }
    }, 
    {
        "pk": 1, 
        "model": "library.typetemplateparameter", 
        "fields": {
            "of_type": 1, 
            "name": "Item", 
            "weakest": "Any"
        }
    }, 
    {
        "pk": 2, 
        "model": "library.typetemplateparameter", 
        "fields": {
            "of_type": 4, 
            "name": "Item", 
            "weakest": "Any"
        }
    }, 
    {
        "pk": 5, 
        "model": "library.typetemplateparameter", 
        "fields": {
            "of_type": 3, 
            "name": "Item", 
            "weakest": "Any"
        }
    }, 
    {
        "pk": 6, 
        "model": "library.typetemplateparameter", 
        "fields": {
            "of_type": 12, 
            "name": "Item", 
            "weakest": "Any"
        }
    }, 
    {
        "pk": 7, 
        "model": "library.typetemplateparameter", 
        "fields": {
            "of_type": 14, 
            "name": "Item", 
            "weakest": "Any"
        }
    }, 
    {
        "pk": 1, 
        "model": "library.methodtemplateparameterbinding", 
        "fields": {
            "interface": 10, 
            "parameter": 1, 
            "bound_to": "Item"
        }
    }, 
    {
        "pk": 2, 
        "model": "library.methodtemplateparameterbinding", 
        "fields": {
            "interface": 15, 
            "parameter": 2, 
            "bound_to": "Item"
        }
    }, 
    {
        "pk": 3, 
        "model": "library.methodtemplateparameterbinding", 
        "fields": {
            "interface": 20, 
            "parameter": 4, 
            "bound_to": "Item"
        }
    }, 
    {
        "pk": 4, 
        "model": "library.methodtemplateparameterbinding", 
        "fields": {
            "interface": 20, 
            "parameter": 5, 
            "bound_to": "Item"
        }
    }, 
    {
        "pk": 5, 
        "model": "library.methodtemplateparameterbinding", 
        "fields": {
            "interface": 11, 
            "parameter": 4, 
            "bound_to": "Item"
        }
    }, 
    {
        "pk": 6, 
        "model": "library.methodtemplateparameterbinding", 
        "fields": {
            "interface": 3, 
            "parameter": 6, 
            "bound_to": "Item"
        }
    }, 
    {
        "pk": 7, 
        "model": "library.methodtemplateparameterbinding", 
        "fields": {
            "interface": 3, 
            "parameter": 7, 
            "bound_to": "Item"
        }
    }, 
    {
        "pk": 8, 
        "model": "library.methodtemplateparameterbinding", 
        "fields": {
            "interface": 12, 
            "parameter": 5, 
            "bound_to": "Item"
        }
    }, 
    {
        "pk": 9, 
        "model": "library.methodtemplateparameterbinding", 
        "fields": {
            "interface": 7, 
            "parameter": 3, 
            "bound_to": "Item"
        }
    }, 
    {
        "pk": 10, 
        "model": "library.methodtemplateparameterbinding", 
        "fields": {
            "interface": 21, 
            "parameter": 8, 
            "bound_to": "Over"
        }
    }, 
    {
        "pk": 11, 
        "model": "library.methodtemplateparameterbinding", 
        "fields": {
            "interface": 22, 
            "parameter": 9, 
            "bound_to": "Item"
        }
    }, 
    {
        "pk": 1, 
        "model": "library.interfacetemplateparameterbinding", 
        "fields": {
            "type": 1, 
            "parameter": 4, 
            "bound_to": "Item"
        }
    }, 
    {
        "pk": 2, 
        "model": "library.interfacetemplateparameterbinding", 
        "fields": {
            "type": 1, 
            "parameter": 6, 
            "bound_to": "Item"
        }
    }, 
    {
        "pk": 3, 
        "model": "library.interfacetemplateparameterbinding", 
        "fields": {
            "type": 1, 
            "parameter": 3, 
            "bound_to": "Item"
        }
    }, 
    {
        "pk": 4, 
        "model": "library.interfacetemplateparameterbinding", 
        "fields": {
            "type": 4, 
            "parameter": 5, 
            "bound_to": "Item"
        }
    }, 
    {
        "pk": 5, 
        "model": "library.interfacetemplateparameterbinding", 
        "fields": {
            "type": 4, 
            "parameter": 2, 
            "bound_to": "Item"
        }
    }, 
    {
        "pk": 6, 
        "model": "library.interfacetemplateparameterbinding", 
        "fields": {
            "type": 8, 
            "parameter": 7, 
            "bound_to": "Cell"
        }
    }, 
    {
        "pk": 7, 
        "model": "library.interfacetemplateparameterbinding", 
        "fields": {
            "type": 8, 
            "parameter": 2, 
            "bound_to": "Cell"
        }
    }, 
    {
        "pk": 8, 
        "model": "library.interfacetemplateparameterbinding", 
        "fields": {
            "type": 7, 
            "parameter": 7, 
            "bound_to": "Cell"
        }
    }, 
    {
        "pk": 9, 
        "model": "library.interfacetemplateparameterbinding", 
        "fields": {
            "type": 7, 
            "parameter": 2, 
            "bound_to": "Cell"
        }
    }, 
    {
        "pk": 10, 
        "model": "library.interfacetemplateparameterbinding", 
        "fields": {
            "type": 3, 
            "parameter": 4, 
            "bound_to": "Item"
        }
    }, 
    {
        "pk": 11, 
        "model": "library.interfacetemplateparameterbinding", 
        "fields": {
            "type": 3, 
            "parameter": 6, 
            "bound_to": "Item"
        }
    }, 
    {
        "pk": 12, 
        "model": "library.interfacetemplateparameterbinding", 
        "fields": {
            "type": 3, 
            "parameter": 3, 
            "bound_to": "Item"
        }
    }, 
    {
        "pk": 13, 
        "model": "library.interfacetemplateparameterbinding", 
        "fields": {
            "type": 4, 
            "parameter": 4, 
            "bound_to": "Item"
        }
    }, 
    {
        "pk": 14, 
        "model": "library.interfacetemplateparameterbinding", 
        "fields": {
            "type": 4, 
            "parameter": 6, 
            "bound_to": "Item"
        }
    }, 
    {
        "pk": 15, 
        "model": "library.interfacetemplateparameterbinding", 
        "fields": {
            "type": 4, 
            "parameter": 3, 
            "bound_to": "Item"
        }
    }, 
    {
        "pk": 16, 
        "model": "library.interfacetemplateparameterbinding", 
        "fields": {
            "type": 13, 
            "parameter": 8, 
            "bound_to": "String"
        }
    }, 
    {
        "pk": 17, 
        "model": "library.interfacetemplateparameterbinding", 
        "fields": {
            "type": 13, 
            "parameter": 9, 
            "bound_to": "String"
        }
    }, 
    {
        "pk": 18, 
        "model": "library.interfacetemplateparameterbinding", 
        "fields": {
            "type": 14, 
            "parameter": 4, 
            "bound_to": "Item"
        }
    }, 
    {
        "pk": 19, 
        "model": "library.interfacetemplateparameterbinding", 
        "fields": {
            "type": 14, 
            "parameter": 6, 
            "bound_to": "Item"
        }
    }, 
    {
        "pk": 20, 
        "model": "library.interfacetemplateparameterbinding", 
        "fields": {
            "type": 14, 
            "parameter": 3, 
            "bound_to": "Item"
        }
    }, 
    {
        "pk": 21, 
        "model": "library.interfacetemplateparameterbinding", 
        "fields": {
            "type": 15, 
            "parameter": 9, 
            "bound_to": "Cell"
        }
    }
]
